name: Dependabot Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
    - name: Check if PR is ready for auto-merge
      id: check-pr
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const title = pr.title.toLowerCase();
          const body = pr.body?.toLowerCase() || '';
          
          // Auto-merge criteria
          const isMinorOrPatch = title.includes('bump') && (
            title.includes('patch') || 
            title.includes('minor') ||
            /bump.*from.*\d+\.\d+\.\d+.*to.*\d+\.\d+\.\d+/.test(title)
          );
          
          const isDependencies = pr.labels.some(label => 
            label.name === 'dependencies' || 
            label.name === 'github-actions'
          );
          
          const isNotMajor = !title.includes('major') && 
                           !title.includes('breaking');
          
          const shouldAutoMerge = isDependencies && isNotMajor && (
            isMinorOrPatch ||
            title.includes('security') ||
            title.includes('dev') ||
            title.includes('eslint') ||
            title.includes('prettier') ||
            title.includes('jest') ||
            title.includes('typescript')
          );
          
          console.log('PR Analysis:', {
            title,
            isDependencies,
            isMinorOrPatch,
            isNotMajor,
            shouldAutoMerge
          });
          
          return shouldAutoMerge;
          
    - name: Wait for CI checks
      if: steps.check-pr.outputs.result == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const maxWaitTime = 10 * 60 * 1000; // 10 minutes
          const pollInterval = 30 * 1000; // 30 seconds
          const startTime = Date.now();
          
          while (Date.now() - startTime < maxWaitTime) {
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });
            
            const relevantChecks = checks.check_runs.filter(check => 
              check.name.includes('CI') || 
              check.name.includes('Test') ||
              check.name.includes('test')
            );
            
            if (relevantChecks.length === 0) {
              console.log('No CI checks found, waiting...');
              await new Promise(resolve => setTimeout(resolve, pollInterval));
              continue;
            }
            
            const allPassed = relevantChecks.every(check => 
              check.status === 'completed' && check.conclusion === 'success'
            );
            
            const anyFailed = relevantChecks.some(check =>
              check.status === 'completed' && check.conclusion === 'failure'
            );
            
            if (anyFailed) {
              throw new Error('Some CI checks failed');
            }
            
            if (allPassed) {
              console.log('All CI checks passed!');
              return true;
            }
            
            console.log('Waiting for CI checks to complete...');
            await new Promise(resolve => setTimeout(resolve, pollInterval));
          }
          
          throw new Error('Timeout waiting for CI checks');
          
    - name: Enable auto-merge
      if: steps.check-pr.outputs.result == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            event: 'APPROVE',
            body: '✅ Auto-approved by Dependabot auto-merge workflow'
          });
          
    - name: Merge PR
      if: steps.check-pr.outputs.result == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            commit_title: `${context.payload.pull_request.title} (#${context.issue.number})`,
            commit_message: 'Auto-merged by Dependabot workflow',
            merge_method: 'squash'
          });
          
          console.log('PR merged successfully!');
          
    - name: Comment on merge failure
      if: failure() && steps.check-pr.outputs.result == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: '❌ Auto-merge failed. Please review and merge manually if appropriate.'
          });